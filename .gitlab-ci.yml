image: node:16-alpine

stages:
  - prepare
  - test
  - e2e_tests

.only_main_or_manual:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == 'main'
      when: on_success
    - when: manual

.bitrise_builder:
  stage: e2e_tests
  image: registry.gitlab.procivis.ch/procivis/one/one-operations/bitrise-builder:0.1.0
  needs: [build_deps, test]
  variables:
    # ONE-wallet project on Bitrise
    BITRISE_PROJECT_SLUG: 6ee8c26f-6d7b-4bcb-8ddc-be1ba3cd2687
    BITRISE_WORKFLOW: ""
  script:
    - >
      /etc/gitrise.sh
      --access-token $BITRISE_API_ACCESS_TOKEN
      --slug $BITRISE_PROJECT_SLUG
      --workflow $BITRISE_WORKFLOW
      --branch "$CI_COMMIT_REF_NAME"
      --env "CI_PIPELINE_ID:$CI_PIPELINE_ID"
      --output "artifacts"
  artifacts:
    paths:
      - artifacts
    expire_in: 10 days

.install-node-modules: &install-node-modules
  - >
    if [ -d ./node_modules ] && [ "$(ls -A ./node_modules)" ]; then
      echo "node_modules exists and seems valid, not re-installing deps."
    else
      echo "node_modules does not exist or is not valid, re-installing deps."
      apk add --update --no-cache --virtual .build-deps alpine-sdk libc6-compat gcompat
      yarn global add node-gyp @mapbox/node-pre-gyp --network-concurrency 1
      yarn install --frozen-lockfile --network-concurrency 1
      yarn rnuc:dev
    fi

.modules_setup:
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  before_script:
    - *install-node-modules


build_deps:
  stage: prepare
  extends:
    - .modules_setup
  script:
    - ''
  cache:
    policy: pull-push
    fallback_keys:
      - $CI_DEFAULT_BRANCH


lint:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn lint

compile:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn compile

test:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn test --coverage
  artifacts:
    paths:
      - coverage/*
    expire_in: 3 days

sonarqube-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  dependencies: [ test ]
  needs: [ test ]
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    - key: ${CI_JOB_NAME}
      paths:
        - .sonar/cache
    - key: ${CI_COMMIT_REF_SLUG}
      paths:
        - node_modules/
      policy: pull
  before_script:
    - >
      if [ -d ./node_modules ] && [ "$(ls -A ./node_modules)" ]; then
        echo "node_modules exists and seems valid, not re-installing deps."
      fi
  script:
    - sonar-scanner
  allow_failure: true
  extends:
    - .only_main_or_manual


bitrise_ios_e2e:
  variables:
    BITRISE_WORKFLOW: E2E_iOS
  extends:
    - .bitrise_builder
    - .only_main_or_manual

bitrise_android_e2e:
  variables:
    BITRISE_WORKFLOW: E2E_Android
  extends:
    - .bitrise_builder
    - .only_main_or_manual
