image: node:18.20.0-alpine

include:
  - project: "procivis/one/one-operations"
    file:
      - "gitlab/github.gitlab-ci.yml"
      - "gitlab/merge.gitlab-ci.yml"
      - "gitlab/rules.gitlab-ci.yml"
      - "gitlab/ci-tools.gitlab-ci.yml"
      - "gitlab/bitrise.gitlab-ci.yml"
      - "gitlab/dtrack.gitlab-ci.yml"

stages:
  - prepare
  - test
  - scan
  - scan_validation
  - build
  - sdk
  - e2e_tests
  - license
  - github
  - sync_with_jira

variables:
  # ONE-wallet project on Bitrise
  BITRISE_PROJECT_SLUG: 6ee8c26f-6d7b-4bcb-8ddc-be1ba3cd2687
  DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet"
  PNPM_CACHE_FOLDER: "~/.pnpm-store"
  CI_TAG_PATTERN: /^v[0-9]+\.[0-9]+\.[0-9]+-.+$/
  GITHUB_TAG_PATTERN: /^v[0-9]+\.[0-9]+\.[0-9]+-.+$/


workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

.rule:skip_in_schedule:
  rules:
    - !reference [ .rule:skip_in_multi_project, rules ]
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never

.rule:all_branches:
  rules:
    - !reference [.rule:skip_in_schedule, rules]
    - when: on_success

.only_main:
  rules:
    - !reference [.rule:skip_in_schedule, rules]
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success

.only_main_or_tag:
  rules:
    - !reference [.rule:skip_in_schedule, rules]
    - if: $CI_COMMIT_TAG =~ $CI_TAG_PATTERN || $CI_COMMIT_TAG =~ $GITHUB_TAG_PATTERN
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: never

.rule:e2e_tests:
  rules:
    - !reference [.rule:skip_in_multi_project, rules]
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - when: manual

.pnpm_install: &pnpm_install
  - npm config set -- @procivis:registry https://${CI_SERVER_HOST}/api/v4/packages/npm/
  - npm config set -- //${CI_SERVER_HOST}/:_authToken ${CI_JOB_TOKEN}
  - npm config set -- //${CI_SERVER_HOST}/api/v4/packages/npm/:_authToken ${CI_JOB_TOKEN}
  - npm install --global corepack@latest
  - corepack enable
  - corepack prepare pnpm@latest-10 --activate
  - pnpm config set store-dir ${PNPM_CACHE_FOLDER}

.install-node-modules: &install-node-modules
  - pnpm config set npmScopes.procivis.npmRegistryServer https://${CI_SERVER_HOST}/api/v4/
  - >
    if [ -d ./node_modules ] && [ "$(ls -A ./node_modules)" ]; then
      echo "node_modules exists and seems valid, not re-installing deps."
    else
      echo "node_modules does not exist or is not valid, re-installing deps."
      apk add --update --no-cache python3 build-base g++ cairo-dev pango-dev giflib-dev
      apk add --update --no-cache --virtual .build-deps alpine-sdk libc6-compat gcompat
      pnpm dlx node-gyp @mapbox/node-pre-gyp
      pnpm install --frozen-lockfile
      pnpm rnuc:dev
    fi

.modules_setup:
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - node_modules/
      - ${PNPM_CACHE_FOLDER}
    policy: pull
  before_script:
    - *pnpm_install
    - *install-node-modules

# CODE CHECKS
build_deps:
  stage: prepare
  extends:
    - .modules_setup
    - .rule:all_branches
  script:
    - ''
  cache:
    policy: pull-push

lint:
  stage: test
  needs: [build_deps]
  extends:
    - .modules_setup
    - .rule:all_branches
  script:
    - pnpm lint

check:translations:
  stage: test
  needs: [build_deps]
  extends:
    - .modules_setup
    - .rule:all_branches
  script:
    - pnpm check:translations

compile:
  stage: test
  needs: [build_deps]
  extends:
    - .modules_setup
    - .rule:all_branches
  script:
    - pnpm compile

test:
  stage: test
  needs: [build_deps]
  extends:
    - .modules_setup
    - .rule:all_branches
  script:
    - pnpm test --coverage
  artifacts:
    paths:
      - coverage/*
    expire_in: 3 days

sonarqube-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  needs: [test]
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    - sonar-scanner
  allow_failure: true
  extends:
    - .modules_setup
    - .only_main
  before_script: [] # disable node_module fetching, yarn not available in the image

# APP BUILDs
build:
  stage: build
  allow_failure: true
  needs:
    - job: test
      artifacts: false
  parallel:
    matrix:
      - BITRISE_WORKFLOW:
        - Android_DEV
        - iOS_DEV
        - Android_TEST
        - Android_DEMO
        - Android_TRIAL
      - BITRISE_PIPELINE:
        - iOS_TEST_and_review
        - iOS_DEMO_and_review
        - iOS_TRIAL_and_review
  rules:
    - if: $CI_PIPELINE_SOURCE != "push"
      when: never
    - if: $CI_COMMIT_BRANCH == 'main' && ($BITRISE_WORKFLOW == 'Android_DEV' || $BITRISE_WORKFLOW == 'iOS_DEV')
      when: on_success
    - if: $CI_COMMIT_TAG =~ $CI_TAG_PATTERN && ($BITRISE_WORKFLOW == 'Android_TEST' || $BITRISE_PIPELINE == 'iOS_TEST_and_review')
      when: on_success
    - if: $CI_COMMIT_TAG =~ $CI_TAG_PATTERN && ($BITRISE_WORKFLOW == 'Android_DEV' || $BITRISE_WORKFLOW == 'iOS_DEV')
      when: never
    - if: $CI_COMMIT_TAG =~ $CI_TAG_PATTERN
      when: manual
    - if: $CI_COMMIT_BRANCH != 'main' && $BITRISE_WORKFLOW != 'Android_DEV' && $BITRISE_WORKFLOW != 'iOS_DEV'
      when: never
    - if: $CI_COMMIT_BRANCH != 'main' && ($BITRISE_WORKFLOW == 'Android_DEV' || $BITRISE_WORKFLOW == 'iOS_DEV')
      when: manual
    - when: never
  extends:
    - .bitrise:app_build

# E2E
e2e:
  stage: e2e_tests
  allow_failure: true
  needs:
    - job: test
      artifacts: false
      optional: true
  parallel:
    matrix:
      - BITRISE_WORKFLOW:
        - E2E_iOS
        - E2E_Android
  extends:
    - .bitrise:e2e_tests
    - .rule:e2e_tests


.upload_bom:
  stage: scan
  needs: [build_deps]
  variables:
    SBOM_FILE_PATH: "bom.json"
    FETCH_LICENSE: "true"
    PROJECT: "js"
    PROJECT_PATH: "."
    AUTHOR: "Procivis"
    INSTALL_DEPENDENCIES: "true"
  extends:
    - .only_main_or_tag
  before_script:
    - *pnpm_install
  script:
    - D_TRACK_PROJECT_VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}
    - npm install -g @cyclonedx/cdxgen
    - if [ "$INSTALL_DEPENDENCIES" = "true" ]; then pnpm install; fi
    - pnpm rnuc:dev
    - >
      cdxgen --required-only -p -t ${PROJECT} -o ${SBOM_FILE_PATH}
      --server-url ${DEPENDENCY_TRACK_BASE_URL}
      --api-key ${DEPENDENCY_TRACK_API_KEY}
      --project-name ${DEPENDENCY_TRACK_PROJECT_NAME}
      --project-version ${D_TRACK_PROJECT_VERSION}
      --author ${AUTHOR}
      ${PROJECT_PATH}
  artifacts:
    when: always
    paths:
      - ${SBOM_FILE_PATH}
    reports:
      cyclonedx:
        - ${SBOM_FILE_PATH}


dtrack:android:upload-bom:
  image: $CI_REGISTRY/procivis/one/one-operations/core-base:1.84.1-0.2
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-Android"
    SBOM_FILE_PATH: "android-sbom.json"
    PROJECT: "java"
    PROJECT_PATH: "android/"
  extends:
      - .upload_bom

dtrack:ios:generate-bom:
  stage: scan
  extends:
    - .bitrise:ios:upload_sbom
    - .only_main_or_tag

dtrack:ios:upload-bom:
  stage: scan
  image: $CI_REGISTRY/procivis/one/one-operations/core-base:1.81.0-0.2
  needs:
    - job: dtrack:ios:generate-bom
      artifacts: true
  extends:
    - .dtrack:upload-bom:curl
    - .only_main_or_tag
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-iOS"
    SBOM_FILE_PATH: "artifacts/ios-sbom.xml"
  before_script:
    # remove authors from OpenSSL entry, because it breaks parsing when uploaded
    - grep -v 'mark\@openssl\.org' ${SBOM_FILE_PATH} >temp.xml
    - mv temp.xml ${SBOM_FILE_PATH}
  artifacts:
    when: always
    paths:
      - ${SBOM_FILE_PATH}
    reports:
      cyclonedx:
        - ${SBOM_FILE_PATH}

dtrack:react-native:upload-bom:
  variables:
    SBOM_FILE_PATH: "react-native-sbom.json"
  extends:
    - .upload_bom

dtrack:android:metrics:
  stage: scan_validation
  needs: [dtrack:android:upload-bom]
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-Android"
  extends:
    - .dTrack:validation:metrics
    - .only_main_or_tag

dtrack:android:policy_violations:
  stage: scan_validation
  needs: [dtrack:android:upload-bom]
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-Android"
  extends:
    - .dTrack:validation:policy
    - .only_main_or_tag

dtrack:ios:metrics:
  stage: scan_validation
  needs: [dtrack:ios:upload-bom]
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-iOS"
  extends:
    - .dTrack:validation:metrics
    - .only_main_or_tag

dtrack:ios:policy_violations:
  stage: scan_validation
  needs: [dtrack:ios:upload-bom]
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-iOS"
  extends:
    - .dTrack:validation:policy
    - .only_main_or_tag

dtrack:react-native:metrics:
  stage: scan_validation
  needs: [dtrack:react-native:upload-bom]
  extends:
    - .dTrack:validation:metrics
    - .only_main_or_tag

dtrack:react-native:policy_violations:
  stage: scan_validation
  needs: [dtrack:react-native:upload-bom]
  extends:
    - .dTrack:validation:policy
    - .only_main_or_tag

license_generate:
  stage: license
  image:
    name: $CI_REGISTRY/procivis/one/one-operations/wallet-licenses:v0.2.0
    entrypoint: [""]
  variables:
    BASE_URL: ${DEPENDENCY_TRACK_BASE_URL}
    API_KEY: ${DEPENDENCY_TRACK_API_KEY}
    OUTPUT_DIR: "assets/licences"
    MR_ENDPOINT: ${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/merge_requests
    BRANCH_NAME: "update_licenses-${CI_PIPELINE_ID}"
  script:
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_PRIVATE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    - python /app/main.py --project wallet
    - git add .
    - git -c user.email="${GITLAB_USER_EMAIL}" -c user.name="${GITLAB_USER_NAME}" commit -m "Update Open Source licenses"
    - git push origin HEAD:refs/heads/${BRANCH_NAME}
    - |-
      PAYLOAD=$(cat << JSON
      {
        "source_branch": "$BRANCH_NAME",
        "target_branch": "$CI_DEFAULT_BRANCH",
        "title": "Update Licences: Automated MR from $CI_COMMIT_REF_NAME",
        "remove_source_branch": "true",
        "assignee_id": "$GITLAB_USER_ID"
      }
      JSON
      )
    - echo "$PAYLOAD"
    - >
      curl --fail -X POST ${MR_ENDPOINT} \
        -H "Content-Type: application/json" \
        -H "PRIVATE-TOKEN: ${GITLAB_PRIVATE_TOKEN}" \
        --data-binary "${PAYLOAD}"
  rules:
    - !reference [.rule:skip_in_multi_project, rules]
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

github:push:
  stage: github
  extends:
    - .ci-tool:open_source_release
  variables:
    GITHUB_PROJECT: "procivis/one-wallet"
    PROJECT: $CI_PROJECT_NAME
    YARN_ENABLE_IMMUTABLE_INSTALLS: false
    FILES_TO_ATTACH: >-
      react-native-sbom.json
      android-sbom.json
      artifacts/ios-sbom.xml
  needs:
    - job: dtrack:ios:upload-bom
      artifacts: true
    - job: dtrack:android:upload-bom
      artifacts: true
    - job: dtrack:react-native:upload-bom
      artifacts: true

set_jira_version:
  stage: sync_with_jira
  extends:
    - .ci-tool:set_jira_version

sdk:new_core_binding_mr:
  stage: sdk
  extends:
    - .modules_setup
    - .create_merge_request
  variables:
    YARN_ENABLE_IMMUTABLE_INSTALLS: false
    FILES_TO_COMMIT: "package.json pnpm-lock.yaml"
  before_script:
    - *pnpm_install
    - *install-node-modules
    - apk add --update git jq curl
    - new_version=$(echo "$NEW_VERSION" | sed 's/^v//')
    - jq --arg version "$new_version" '.dependencies["@procivis/react-native-one-core"] = $version' package.json > package-updated.json
    - mv package-updated.json package.json
    - pnpm install --no-frozen-lockfile
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: always
