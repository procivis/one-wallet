image: node:18.16.0-alpine

stages:
  - prepare
  - test
  - scan
  - scan_validation
  - build
  - e2e_tests
  - license

variables:
  # ONE-wallet project on Bitrise
  BITRISE_PROJECT_SLUG: 6ee8c26f-6d7b-4bcb-8ddc-be1ba3cd2687
  DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet"
  YARN_NPM_AUTH_TOKEN: ${CI_JOB_TOKEN}


workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG


.only_main:
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: on_success

.only_main_or_manual:
  rules:
    - !reference [.only_main, rules]
    - when: manual

.bitrise_e2e:
  stage: e2e_tests
  image: registry.gitlab.procivis.ch/procivis/one/one-operations/bitrise-builder:0.1.0
  needs: [test]
  script:
    - >
      /etc/gitrise.sh
      --access-token $BITRISE_API_ACCESS_TOKEN
      --slug $BITRISE_PROJECT_SLUG
      --workflow $BITRISE_WORKFLOW
      --commit "$CI_COMMIT_SHA"
      --env "CI_PIPELINE_ID:$CI_PIPELINE_ID"
      --output "artifacts"
  artifacts:
    paths:
      - artifacts
    expire_in: 10 days

.bitrise_build:
  stage: build
  image: registry.gitlab.procivis.ch/procivis/one/one-operations/bitrise-builder:0.1.0
  needs: [test]
  script:
    - >
      /etc/gitrise.sh
      --access-token $BITRISE_API_ACCESS_TOKEN
      --slug $BITRISE_PROJECT_SLUG
      --workflow $BITRISE_WORKFLOW
      --commit "$CI_COMMIT_SHA"
      --env "CI_PIPELINE_ID:$CI_PIPELINE_ID"

.install-node-modules: &install-node-modules
  - >
    if [ -d ./node_modules ] && [ "$(ls -A ./node_modules)" ]; then
      echo "node_modules exists and seems valid, not re-installing deps."
    else
      echo "node_modules does not exist or is not valid, re-installing deps."
      apk add --update --no-cache --virtual .build-deps alpine-sdk libc6-compat gcompat
      yarn config set npmScopes.procivis.npmRegistryServer https://${CI_SERVER_HOST}/api/v4/packages/npm/
      yarn dlx node-gyp @mapbox/node-pre-gyp
      YARN_NETWORK_CONCURRENCY=1 yarn install --immutable
      yarn rnuc:dev
    fi

.modules_setup:
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - ${YARN_CACHE_FOLDER}
    policy: pull
  before_script:
    - *install-node-modules

# CODE CHECKS
build_deps:
  stage: prepare
  extends: .modules_setup
  script:
    - ''
  cache:
    policy: pull-push

lint:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn lint

compile:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn compile

test:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn test --coverage
  artifacts:
    paths:
      - coverage/*
    expire_in: 3 days

sonarqube-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  dependencies: [test]
  needs: [test]
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    - sonar-scanner
  allow_failure: true
  extends:
    - .modules_setup
    - .only_main
  before_script: [] # disable node_module fetching, yarn not available in the image

# APP BUILDs
build:
  parallel:
    matrix:
      - BITRISE_WORKFLOW:
          - Android_DEV
          - iOS_DEV
          - Android_TEST
          - iOS_TEST
          - Android_DEMO
          - iOS_DEMO
          - Android_TRIAL
          - iOS_TRIAL
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && ($BITRISE_WORKFLOW == 'Android_DEV' || $BITRISE_WORKFLOW == 'iOS_DEV')
      when: on_success
    - if: $CI_COMMIT_BRANCH != 'main' && $BITRISE_WORKFLOW != 'Android_DEV' && $BITRISE_WORKFLOW != 'iOS_DEV'
      when: never
    - when: manual
  extends:
    - .bitrise_build

# E2E
e2e:
  parallel:
    matrix:
      - BITRISE_WORKFLOW:
          - E2E_iOS
          - E2E_Android
  extends:
    - .bitrise_e2e
    - .only_main_or_manual


.dTrack_metrics: &dTrack_metrics
  - D_TRACK_PROJECT_VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}
  - apk add --update curl jq
  - base_url=${DEPENDENCY_TRACK_BASE_URL}/api/v1/project/lookup
  - url="${base_url}?name=${DEPENDENCY_TRACK_PROJECT_NAME}&version=${D_TRACK_PROJECT_VERSION}"
  - echo "URL=$url"
  - >
    result=$(curl -X GET "${url}" \
      -H "X-Api-Key: ${DEPENDENCY_TRACK_API_KEY}" \
      -H "Accept: application/json")
  - metrics=$(echo $result | jq -r .metrics)
  - echo "Dependency Track Project Version metrics=${metrics}"

.dTrack_metrics_validation:
  stage: scan_validation
  allow_failure: true
  script:
    - *dTrack_metrics
    - critical=$(echo ${metrics} | jq -r .critical)
    - high=$(echo ${metrics} | jq -r .high)
    - echo "Critical vulnerabilities=${critical}"
    - echo "High vulnerabilities=${high}"
    - >
      if [[ ${critical} -gt 0  || ${high} -gt 0  ]]; then
          echo "Lib vulnerabilities more that 0."
          exit 1;
      fi

.dTrack_policy_validation:
  stage: scan_validation
  allow_failure: true
  script:
    - *dTrack_metrics
    - violated_licences=$(echo ${metrics} | jq -r .policyViolationsFail)
    - echo "Count of violated_licences=${violated_licences}"
    - >
      if [[ ${violated_licences} -gt 0 ]]; then
        echo "Violated licences more that 0."
        exit 1;
      fi

.upload_bom:
  stage: scan
  needs: [build_deps]
  variables:
    SBOM_FILE_PATH: "bom.json"
    FETCH_LICENSE: "true"
    PROJECT: "js"
    PROJECT_PATH: "."
  before_script:
    - D_TRACK_PROJECT_VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}
    - npm install -g @cyclonedx/cdxgen
  script:
    - yarn rnuc:dev
    - >
      cdxgen --required-only -p -t ${PROJECT} -o ${SBOM_FILE_PATH}
      --server-url ${DEPENDENCY_TRACK_BASE_URL}
      --api-key ${DEPENDENCY_TRACK_API_KEY}
      --project-name ${DEPENDENCY_TRACK_PROJECT_NAME}
      --project-version ${D_TRACK_PROJECT_VERSION}
      ${PROJECT_PATH}
  artifacts:
    reports:
      cyclonedx:
        - ${SBOM_FILE_PATH}


dependency_track:android:upload-bom:
  image: registry.gitlab.procivis.ch/procivis/one/one-operations/core-base:1.76.0-0.1
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-Android"
    SBOM_FILE_PATH: "android-bom.json"
    PROJECT: "java"
    PROJECT_PATH: "android/"
  extends:
      - .modules_setup
      - .upload_bom
      - .only_main_or_manual

dependency_track:ios:upload-bom:
  image: registry.gitlab.procivis.ch/procivis/one/one-operations/bitrise-builder:0.1.0
  variables:
    D_TRACK_PATH: ${DEPENDENCY_TRACK_BASE_URL}/api/v1/bom
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-iOS"
    SBOM_FILE_PATH: "artifacts/bom.xml"
  before_script:
    - D_TRACK_PROJECT_VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}
  script:
    - >
      /etc/gitrise.sh
      --access-token $BITRISE_API_ACCESS_TOKEN
      --slug $BITRISE_PROJECT_SLUG
      --workflow iOS_SBOM
      --commit "$CI_COMMIT_SHA"
      --output "artifacts"
    # remove authors from OpenSSL entry, because it breaks parsing when uploaded
    - grep -v 'mark\@openssl\.org' ${SBOM_FILE_PATH} >temp.xml
    - mv temp.xml ${SBOM_FILE_PATH}
    - >
      curl -X "POST" "${D_TRACK_PATH}" \
        -H "Content-Type: multipart/form-data" \
        -H "X-API-Key: ${DEPENDENCY_TRACK_API_KEY}" \
        -F "autoCreate=true" \
        -F "projectName=${DEPENDENCY_TRACK_PROJECT_NAME}" \
        -F "projectVersion=${D_TRACK_PROJECT_VERSION}" \
        -F "bom=@${SBOM_FILE_PATH}"
  extends:
    - .upload_bom
    - .only_main_or_manual

dependency_track:react-native:upload-bom:
  variables:
    SBOM_FILE_PATH: "rn-bom.xml"
  extends:
    - .modules_setup
    - .upload_bom
    - .only_main_or_manual

dependency_track:android:metrics:
  needs: [dependency_track:android:upload-bom]
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-Android"
  extends:
    - .dTrack_metrics_validation

dependency_track:android:policy_violations:
  needs: [dependency_track:android:upload-bom]
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-Android"
  extends:
    - .dTrack_policy_validation

dependency_track:ios:metrics:
  needs: [dependency_track:ios:upload-bom]
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-iOS"
  extends:
    - .dTrack_metrics_validation

dependency_track:ios:policy_violations:
  needs: [dependency_track:ios:upload-bom]
  variables:
    DEPENDENCY_TRACK_PROJECT_NAME: "ONE-Wallet-iOS"
  extends:
    - .dTrack_policy_validation

dependency_track:react-native:metrics:
  needs: [dependency_track:react-native:upload-bom]
  extends:
    - .dTrack_metrics_validation

dependency_track:react-native:policy_violations:
  needs: [dependency_track:react-native:upload-bom]
  extends:
    - .dTrack_policy_validation


license_generate:
  image:
    name: registry.gitlab.procivis.ch/procivis/one/one-operations/wallet-licenses:v0.2.0
    entrypoint: [""]
  variables:
    BASE_URL: ${DEPENDENCY_TRACK_BASE_URL}
    API_KEY: ${DEPENDENCY_TRACK_API_KEY}
    OUTPUT_DIR: "assets/licences"
    MR_ENDPOINT: ${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/merge_requests
    BRANCH_NAME: "update_licenses-${CI_PIPELINE_ID}"
  script:
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_PRIVATE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    - python /app/main.py --project wallet
    - git add .
    - git -c user.email="${GITLAB_USER_EMAIL}" -c user.name="${GITLAB_USER_NAME}" commit -m "Update Open Source licenses"
    - git push origin HEAD:refs/heads/${BRANCH_NAME}
    - |-
      PAYLOAD=$(cat << JSON
      {
        "source_branch": "$BRANCH_NAME",
        "target_branch": "$CI_DEFAULT_BRANCH",
        "title": "Update Licences: Automated MR from $CI_COMMIT_REF_NAME",
        "remove_source_branch": "true",
        "assignee_id": "$GITLAB_USER_ID"
      }
      JSON
      )
    - echo "$PAYLOAD"
    - >
      curl --fail -X POST ${MR_ENDPOINT} \
        -H "Content-Type: application/json" \
        -H "PRIVATE-TOKEN: ${GITLAB_PRIVATE_TOKEN}" \
        --data-binary "${PAYLOAD}"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
