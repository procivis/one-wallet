diff --git a/node_modules/expo-modules-core/ios/AppDelegates/EXLegacyAppDelegateWrapper.m b/node_modules/expo-modules-core/ios/AppDelegates/EXLegacyAppDelegateWrapper.m
index 61b19ec..ba83654 100644
--- a/node_modules/expo-modules-core/ios/AppDelegates/EXLegacyAppDelegateWrapper.m
+++ b/node_modules/expo-modules-core/ios/AppDelegates/EXLegacyAppDelegateWrapper.m
@@ -156,57 +156,6 @@ __block void (^completionHandlerCaller)(void) = ^ {
   }
 }
 
-#pragma mark - Notifications
-
-- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)token
-{
-  SEL selector = @selector(application:didRegisterForRemoteNotificationsWithDeviceToken:);
-  NSArray<id<UIApplicationDelegate>> *subcontractorsArray = [self getSubcontractorsImplementingSelector:selector];
-  
-  for (id<UIApplicationDelegate> subcontractor in subcontractorsArray) {
-    [subcontractor application:application didRegisterForRemoteNotificationsWithDeviceToken:token];
-  }
-}
-
-- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)err
-{
-  SEL selector = @selector(application:didFailToRegisterForRemoteNotificationsWithError:);
-  NSArray<id<UIApplicationDelegate>> *subcontractorsArray = [self getSubcontractorsImplementingSelector:selector];
-  
-  for(id<UIApplicationDelegate> subcontractor in subcontractorsArray) {
-    [subcontractor application:application didFailToRegisterForRemoteNotificationsWithError:err];
-  }
-}
-
-- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler
-{
-  SEL selector = @selector(application:didReceiveRemoteNotification:fetchCompletionHandler:);
-  NSArray<id<UIApplicationDelegate>> *subcontractorsArray = [self getSubcontractorsImplementingSelector:selector];
-  
-  __block NSUInteger subcontractorsLeft = [subcontractorsArray count];
-  __block UIBackgroundFetchResult fetchResult = UIBackgroundFetchResultNoData;
-  __block NSObject *lock = [NSObject new];
-  
-  void (^handler)(UIBackgroundFetchResult) = ^(UIBackgroundFetchResult result) {
-    @synchronized (lock) {
-      if (result == UIBackgroundFetchResultFailed) {
-        fetchResult = UIBackgroundFetchResultFailed;
-      } else if (fetchResult != UIBackgroundFetchResultFailed && result == UIBackgroundFetchResultNewData) {
-        fetchResult = UIBackgroundFetchResultNewData;
-      }
-      
-      subcontractorsLeft--;
-      if (subcontractorsLeft == 0) {
-        completionHandler(fetchResult);
-      }
-    }
-  };
-  
-  for (id<UIApplicationDelegate> subcontractor in subcontractorsArray) {
-    [subcontractor application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:handler];
-  }
-}
-
 
 #pragma mark - Subcontractors
 
diff --git a/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift b/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
index 88c0d99..721bea7 100644
--- a/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
+++ b/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
@@ -97,44 +97,6 @@ open class ExpoAppDelegate: UIResponder, UIApplicationDelegate {
     }
   }
 
-  // MARK: - Handling Remote Notification Registration
-
-  open func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
-    subscribers.forEach { $0.application?(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken) }
-  }
-
-  open func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
-    subscribers.forEach { $0.application?(application, didFailToRegisterForRemoteNotificationsWithError: error) }
-  }
-
-  open func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
-    let selector = #selector(application(_:didReceiveRemoteNotification:fetchCompletionHandler:))
-    let subs = subscribers.filter { $0.responds(to: selector) }
-    var subscribersLeft = subs.count
-    var fetchResult: UIBackgroundFetchResult = .noData
-    let dispatchQueue = DispatchQueue(label: "expo.application.remoteNotification", qos: .userInteractive)
-
-    let handler = { (result: UIBackgroundFetchResult) in
-      dispatchQueue.sync {
-        if result == .failed {
-          fetchResult = .failed
-        } else if fetchResult != .failed && result == .newData {
-          fetchResult = .newData
-        }
-
-        subscribersLeft -= 1
-
-        if subscribersLeft == 0 {
-          completionHandler(fetchResult)
-        }
-      }
-    }
-
-    subs.forEach { subscriber in
-      subscriber.application?(application, didReceiveRemoteNotification: userInfo, fetchCompletionHandler: handler)
-    }
-  }
-
   // MARK: - Continuing User Activity and Handling Quick Actions
 
   open func application(_ application: UIApplication, willContinueUserActivityWithType userActivityType: String) -> Bool {
